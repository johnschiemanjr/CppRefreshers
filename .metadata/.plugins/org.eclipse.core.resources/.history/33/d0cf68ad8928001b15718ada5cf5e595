/*
 * Board.cpp
 *
 *  Created on: Nov 15, 2020
 *      Author: John
 */

#include "Board.h"
#include "Tile.h"
#include <string>
#include <iostream>
#include <set>

using namespace std;

// learning moment: if i had wanted to declare these in the constructor,
// it would have had the same effect as using this initialization list
Board::Board():tiles{{Tile("1"), Tile("2"), Tile("3")},
	{Tile("4"), Tile("5"), Tile("6")},
	{Tile("7"), Tile("8"), Tile("9")}},
	occupied_tiles(0),
	winner(false)
{
};

Board::~Board()
{
}

void Board::make_move(string tile, string player_symbol)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (tiles[i][j].get_status().compare(tile) == 0)
			{
				tiles[i][j].set_status(player_symbol);
			}
		}
	}
}

void Board::print_board() const
{
	cout << "\n";
	cout << "  " << tiles[0][0].get_status() << "  |  " << tiles[0][1].get_status() << "  |  " << tiles[0][2].get_status() << "  " << endl;
	cout << "-----|-----|-----" << endl;
	cout << "  " << tiles[1][0].get_status() << "  |  " << tiles[1][1].get_status() << "  |  " << tiles[1][2].get_status() << "  " << endl;
	cout << "-----|-----|-----" << endl;
	cout << "  " << tiles[2][0].get_status() << "  |  " << tiles[2][1].get_status() << "  |  " << tiles[2][2].get_status() << "  " << endl;
}

bool Board::board_has_winner() const
{
	return false;
}

set<string> Board::get_valid_moves() const
{

}
